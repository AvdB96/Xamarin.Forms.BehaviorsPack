<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.ObjectModel.dll" #>
<#@ Assembly Name="$(ProjectDir)..\packages\Xamarin.Forms.2.4.0.282\lib\netstandard1.0\Xamarin.Forms.Core.dll" #>
<#@ Assembly Name="$(ProjectDir)..\packages\Xamarin.Forms.2.4.0.282\lib\netstandard1.0\Xamarin.Forms.Platform.dll" #>
<#@ Assembly Name="$(ProjectDir)..\packages\Xamarin.Forms.2.4.0.282\lib\netstandard1.0\Xamarin.Forms.Xaml.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Xamarin.Forms" #>
<#@ import namespace="System.Windows.Input" #>
<#   
    var assembly = typeof(Page).Assembly;
    var types = assembly.ExportedTypes
        .Where(
            x => !x.IsInterface
                && !x.IsGenericType
                && x.IsSubclassOf(typeof(BindableObject)))
        .OrderBy(x => x.FullName);
	var excludeInfos = new List<ExcludeInfo>
	{
		new ExcludeInfo { Type = typeof(VisualElement), EventName = "BatchCommitted", EventPropertyName = "Data"  },
		new ExcludeInfo { Type = typeof(VisualElement), EventName = "FocusChangeRequested", EventPropertyName = "Focus"  },
		new ExcludeInfo { Type = typeof(VisualElement), EventName = "FocusChangeRequested", EventPropertyName = "Result"  },
	};

#>
using System;
using System.Windows.Input;

namespace Xamarin.Forms.BehaviorsPack {
<#
	foreach (var type in types)
    {
		var eventInfos = type.GetEvents().Where(x => x.DeclaringType == type).OrderBy(x => x.Name);
		if(eventInfos.Any())
        {
			foreach (var eventInfo in eventInfos)
			{
				var typeName = $"{type.Name}{eventInfo.Name}";
				var propertyInfos = new List<BindablePropertyInfo>();
				propertyInfos.Add(new BindablePropertyInfo {
					PropertyName = "Command",
					EventArgsTypeName = "EventArgs",
					CommandParameter = "eventArgs"
				});
                if (eventInfo.EventHandlerType.IsGenericType)
                {
                    var eventArgType = eventInfo.EventHandlerType.GenericTypeArguments.First();
					foreach (var propertyInfo in eventArgType.GetProperties())
					{
						if (excludeInfos.Any(x => x.Type == type && x.EventName == eventInfo.Name && x.EventPropertyName == propertyInfo.Name))
							continue;

						propertyInfos.Add(new BindablePropertyInfo {
							PropertyName = $"{propertyInfo.Name}Command",
							EventArgsTypeName = eventArgType.FullName,
							CommandParameter = $"eventArgs.{propertyInfo.Name}"
						});
					}
                }
#>
	public class <#= typeName #> {
<#
				foreach (var bindablePropertyInfo in propertyInfos)
				{
#>
        public static readonly BindableProperty <#= bindablePropertyInfo.PropertyName #>Property =
            BindableProperty.CreateAttached("<#= bindablePropertyInfo.PropertyName #>", typeof(ICommand), typeof(<#= typeName #>), null, propertyChanged:On<#= bindablePropertyInfo.PropertyName #>Changed);

        public static ICommand Get<#= bindablePropertyInfo.PropertyName #>(BindableObject bindableObject)
        {
            return (ICommand)bindableObject.GetValue(<#= bindablePropertyInfo.PropertyName #>Property);
        }

		private static void On<#= bindablePropertyInfo.PropertyName #>Changed(BindableObject bindable, object oldValue, object newValue)
        {
            if (bindable is <#= type.Name #> target)
            {
                if (oldValue == null && newValue != null)
                {
                    target.<#= eventInfo.Name #> += <#= bindablePropertyInfo.EventHandlerName #>;
                }
                else if (oldValue != null && newValue == null)
                {
                    target.<#= eventInfo.Name #> -= <#= bindablePropertyInfo.EventHandlerName #>;
                }
            }
		}

        private static void <#= bindablePropertyInfo.EventHandlerName #>(object o, <#= bindablePropertyInfo.EventArgsTypeName #> eventArgs)
        {
            var command = Get<#= bindablePropertyInfo.PropertyName #>((BindableObject)o);
            if (command.CanExecute(<#= bindablePropertyInfo.CommandParameter #>))
                command.Execute(<#= bindablePropertyInfo.CommandParameter #>);
        }
<#
				}
#>
	}

<#
            }
        }
#>
<#
    }
#>
}
<#+
	public class BindablePropertyInfo
	{
		public string PropertyName { get; set; }
		public string EventHandlerName => $"On{PropertyName}Changed";
		public string EventArgsTypeName { get; set; }
		public string CommandParameter { get; set; }
	}

	public class ExcludeInfo
	{
		public Type Type { get; set; }
		public string EventName { get; set; }
		public string EventPropertyName { get; set; }
	}
#>